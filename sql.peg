{
	var flatten = function (arr) {
        return arr.reduce(function(a, b) {
	        return Array.isArray(b) ? a.concat(flatten(b)) : a.concat(b);
        }, []).filter(function(item) {
	        return !Array.isArray(item) && item != null && item !== "\n";
        });
    };
}


START
  = __ program:PROGRAM+ {
    return program;
  }
    
PROGRAM
  = OperationCreate
  / OperationSet
  / OperationDrop
  / OperationUse
  / Comment
  / LineTerminatorSequence

OperationCreate
  =
 (
 	StatementCreate _ elem:(StatementTable) _ cond:(
	    ConditionIf _ OperandExists /
	    ConditionIf _ ConditionNot _ OperandExists /
    "") _
    TableName _ "(" _ ("\n" / "") _ Values+ _ ")" _ ("\n" / "") _
    MetaClause _
    EOS 
  )
  / ( StatementCreate _ "SCHEMA" _ cond:(
    ConditionIf _ OperandExists /
    ConditionIf _ ConditionNot _ OperandExists /
    "") _ TableName _ ( "DEFAULT CHARACTER SET utf8" / "") _ EOS
  )
  
OperationUse
  = "USE" _ TableName _ EOS

OperationSet
  = "SET" _ elems:(!LineTerminator src)* EOS { return elems.join(""); }

OperationDrop
  = "DROP" _ ( "SCHEMA" / "TABLE" ) _ (
    ConditionIf _ OperandExists /
    ConditionIf _ ConditionNot _ OperandExists /
    ""
  ) _ TableName _ EOS

TableName
  = (ValueName "." ValueName) / (ValueName)
  
ValueName
  = val:(("`" value "`") / value) {
    return Array.isArray(val) ? val.join("").replace(/`/g, "") : val;
  }


Values
  =  _ expr:Value {
    var obj = flatten(expr);
    console.log(obj);
    return obj;
  }
  
Value
  = 
  ( 
  	ValueName _
	( Type / TypeWithLength ) _
    ( NULL  / "" ) _
    ( ConditionNot _ NULL  / "" ) _
    ( DefaultClause / "") _
    ( CommentClause / "" ) _
    ( AutoIncrement / "") _
    BR
  ) / (
    ( PrimaryKey  /  Index ) BR
  ) / (
    Constraint BR
  )
  
MetaClause
  = ( "ENGINE" / "engine" ) _ "=" _ engines _ (
  ( AutoIncrement "=" integer / "" ) _
  ( DefaultCharset / "") _
)
  
DefaultCharset "charset"
  = "DEFAULT CHARSET" _ "=" _ charsets

charsets
  = ("utf8")

engines
  = ( "InnoDB" )

PrimaryKey "PK"
  = ("PRIMARY" _ "KEY" / "primary" _ "key") _ "(" _ ValueName _ ")"

Index "INDEX"
  = ( "KEY" / "key" ) _ ValueName _ "(" ValueName ")"

Constraint "CONSTRAINT"
  = ( "CONSTRAINT" / "constraint" ) _ ValueName _ (ForeignKey)

ForeignKey "FK"
  = ( "FOREIGN KEY" / "foreign key") _ "(" ValueName ")" _ ( "REFERENCES" / "references" ) _ ValueName _ "(" ValueName ")" _ OnEvent

OnEvent
  =  ( "ON DELETE NO ACTION ON UPDATE NO ACTION" / "" )

Type
  = (
    ("datetime" / "DATETIME") /
   ( "date" / "DATE") /
    NULL
  )

TypeWithLength
  = (
    ("int" / "INT") _ ( ValueLength / "" ) _ Sign  /
    ("varchar" / "VARCHAR") _ ( ValueLength / "" ) /
    ("tinyint" / "TINYINT") _ ( ValueLength / "" ) _ Sign
  )

ValueLength
  = "(" _ integer _ ")"

NULL
  = ("null" / "NULL")
  
DefaultClause
  = ("default" / "DEFAULT") _ (NULL / defaults)
  
CommentClause
  = ("comment" / "COMMENT") _ comments

Sign
  = ("unsigned" / "UNSIGNED" / "")

AutoIncrement
  = ("AUTO_INCREMENT" / "auto increment")

StatementCreate
  = ("create" / "CREATE")

StatementTable
  = ("table" / "TABLE")

ConditionIf
  = ("if" / "IF")

ConditionNot
  = ("not" / "NOT")

OperandExists
  = ("exists" / "EXISTS")

COMMA
  = ","
  
EOS
  = __ ";"
  / _ SingleLineComment? LineTerminatorSequence
  / __ EOF
  
EOF
  = !.
  
EOL
  = EOF / [\n\r]+

MultiLineComment
  = "/*" (!"*/" src)* "*/"
  
MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) src)* "*/"

SingleLineComment
  = "--" (!LineTerminator src)*

Comment
  = MultiLineComment / SingleLineComment

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

BR
  = ( COMMA EOL / "" )

src
  = .

string
	= chars:[a-zA-Z]+ { return chars.join(""); }

value
    = chars:[a-zA-Z_]+ { return chars.join(""); }
    
comments
    = chars:("'" (!"'" src)* "'") { return chars.join(""); }

defaults
    = ( "'" chars:[a-zA-Z0-9]+ "'" ) / integer

integer
  = _ [0-9]+ { return parseInt(text(), 10); }

_
 = (ws / MultiLineCommentNoLineTerminator)*
 
__
 = (ws / LineTerminatorSequence / Comment)*

zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

ws "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / zs