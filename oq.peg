// Functions ------------------------------
{
	var flatten = function (arr) {
    if (arr == null) { return null; }
    return arr.reduce(function(a, b) {
      return Array.isArray(b) ? a.concat(flatten(b)) : a.concat(b);
    }, []).filter(function(item) {
      return !Array.isArray(item) && item != null && item !== "\n";
    });
  };
  var genNumberType = function (type, length, sign) {
    var numberType = {
      type: type.toLowerCase(),
      sign: sign,
      length: length,
      min: 0,
      max: 0,
      bites: 0
    };
    switch (numberType.type) {
      case "int":
        numberType.min = sign === "unsigned" ? 0 : -2147483648;
        numberType.max = sign === "unsigned" ? 4294967295 : 2147483647;
        numberType.bites = 4;
        break;
      case "tinyint":
        numberType.min = sign === "unsigned" ? 0 : -128;
        numberType.max = sign === "unsigned" ? 255 : 127;
        numberType.bites = 1;
        break;
    }
//    console.log("Generated Number Type: ", numberType);
    return numberType;
  }

  var genStringType = function (type, length) {
    var stringType = {
      type: type.toLowerCase(),
      length: length
    }
    switch (stringType) {
      case "varchar":
        stringType.length = 255
        break;
    }
//    console.log("Generated String Type: ", stringType);
    return stringType;
  }
}


// Start ------------------------------
Start
  = __ queries:Queries __ {
    return queries;
  }
  
// Queries ------------------------------
Queries
  = body: SourceElements? {
  	return flatten(body);
  }
  
// SourceElements ------------------------------
SourceElements
  = SourceElement (__ SourceElement)*
  
SourceElement
  = Statement
  
// Statements ------------------------------

Statement
  = 
  CommentOut
  / SetStatement
  / CreateStatement
  / CreateTableStatement
  / AlterStatement
  / DropStatement
  / TruncateStatement
  / TransactionStatement
  / UseStatement
  / DelimiterStatement

SetStatement = SetToken _ any  { return null; }
CreateStatement
  = 
      (
  	    CreateToken _ SchemaToken _ any EOS
      ) { return null; }
      /
      (
        CreateToken _ DefinerToken _ "=" _ any _ TriggerToken _ TableName _ (
          AfterToken _ InsertToken _ OnToken
        ) { return null; }
      )
      
CreateTableStatement
  =  CreateToken _ TableToken _ (
    IfToken _ NotToken _ ExistsToken
    /
    IfToken _ ExistsToken
    /
    ""
  ) _ schema:TableName _ wl
    __ elements:Elements __
  wr __ EngineToken _ "=" _ engines _ ( AutoIncrementToken "=" integer / "" ) _ ( DefaultToken _ CharsetToken "=" charsets / "")
  EOS {
    console.log("Schema", schema);
    console.log("Elements",  elements);
    var mapped = Object.assign({}, schema, {
      fields: elements
    });
    console.log(mapped);
    return mapped;
  }

AlterStatement = AlterToken any { return null; }
DropStatement = DropToken any  { return null; }
TruncateStatement = TruncateToken any  { return null; }
TransactionStatement = StartToken TransactionToken CommitToken EOS  { return null; }
UseStatement = UseToken any  { return null; }
DelimiterStatement = DelimiterToken any  { return null; }

// Combinations

//// Comment
Comment "comment" = CommentToken _ comment:anyCharacter {
  return comment;
}

//// Column
Elements = (
  Constraint
  /
  Key
  /
  PrimaryKey
  /
  UniqueIndex
  /
  Index
  /
  ( NullColumn / AutoIncrementColumn / Column / NotNullColumn )
)+

/*
Column = _ fieldName:ObjectName _ type:Type _ meta:(
  NullToken { return { default: null, autoIncrement: false }; }
  / DefaultToken _ NullToken { return {default: null, autoIncrement: false }; }
  / NotToken _ NullToken _ ( AutoIncrementToken / DefaultToken _ defaultValue  / "" )
) _ comment:( Comment / "" ) _ ( "," / "" ) __ {
  console.log("Metadata", meta);
  console.log("Field Name", fieldName);
  console.log("Comment", comment);
  console.log("Type", type);
}
*/

Column = _ fieldName:ObjectName _ type:Type _ NotToken _ NullToken _ DefaultToken _ defaultVal:defaultValue _ comment:( Comment / "" ) _ ( "," / "" ) __ {
  var column = {
    name: fieldName["name"],
    type: type,
    default: defaultVal,
    autoIncrement: true,
    meta: {
      comment: comment
    }
  };
  console.log(column);
  return column;
}

AutoIncrementColumn = _ fieldName:ObjectName _ type:Type _ NotToken _ NullToken _ AutoIncrementToken _ comment:( Comment / "" ) _ ( "," / "" ) __ {
  var column = {
    name: fieldName["name"],
    type: type,
    default: null,
    autoIncrement: true,
    meta: {
      comment: comment
    }
  };
  console.log(column);
  return column;
}

NotNullColumn = _ fieldName:ObjectName _ type:Type _ NotToken _ NullToken _ comment:( Comment / "" ) _ ( "," / "" ) __ {
  var zeroValue = null;
  switch(type["type"]) {
    case "varchar":
      zeroValue = "";
      break;
    case "int":
    case "tinyint":
      zeroValue = 0;
      break;
    case "date":
    case "datetime":
      zeroValue = new Date();
      break;
  }
  var column = {
    name: fieldName["name"],
    type: type,
    default: zeroValue,
    autoIncrement: true,
    meta: {
      comment: comment
    }
  };
  console.log(column);
  return column;
}


NullColumn = _ fieldName:ObjectName _ type:Type _ meta:(
  NullToken
  / DefaultToken _ NullToken
) _ comment:( Comment / "" ) _ ( "," / "" ) __ {
  var column = {
    name: fieldName["name"],
    type: type,
    default: null,
    autoIncrement: false,
    meta: {
      comment: comment
    }
  };
  console.log(column);
  return column;
}

PrimaryKey
  = token:(PrimaryToken _ KeyToken) _ "(" head:ObjectName tail:( __ "," __  ObjectName)*  ")" ( "," / "" ) __ {
      var rest = tail.map(function(item) {
        return item[item.length - 1];
      });
      var pk = {
        type: "pk",
        keys: [head, ...rest]
      };
      return pk;
  }

Key
  = KeyToken _ ObjectName _ "(" ObjectName ")"  ( "," / "" ) __

Index
  = IndexToken _ ObjectName _ "(" ObjectName _ ( AscToken / DescToken ) ")" ( "," / "" ) __

UniqueIndex
  = UniqueToken _ IndexToken _ ObjectName _ "(" ObjectName _ ( AscToken / DescToken ) ")" ( "," / "" ) __

Constraint
  = ConstraintToken _ ObjectName _ 
  ForeignToken _ KeyToken _ "(" ObjectName ")" _
  ReferencesToken _ ObjectName _ "(" ObjectName ")" _
  OnToken _ DeleteToken _ ( NoToken _ ActionToken / "" ) _
  OnToken _ UpdateToken _ ( NoToken _ ActionToken / "" ) ( "," / "" ) __

// Tokens ------------------------------

SetToken = ( "SET" / "set" ) 
CreateToken =  ( "CREATE" / "create" )
RoleToken = ( "ROLE" / "role" )
DomainToken = ( "DOMAIN" / "domain" )
TypeToken = ( "TYPE" / "type" )
TranslationToken = ( "TRANSLATION" / "translation" )
ModuleToken = ( "MODULE" / "module" )
ProcedureToken = ( "PROCEDURE" / "procedure" )
FunctionToken = ( "FUNCTION" / "function" )
MethodToken = ( "METHOD" / "method" )
SpecificToken = ( "SPECIFIC" / "specific" ) 
AlterToken = ( "ALTER" / "alter" )
DropToken = ( "DROP" / "drop" )
TruncateToken = ( "TRUNCATE" / "truncate" ) 
StartToken = ( "START" / "start" )
TransactionToken = ( "TRANSACTION" / "transaction" )
CommitToken = ( "COMMIT" / "commit" )
UseToken = ( "USE" / "use" ) 
DelimiterToken = ( "DELIMITER" / "delimiter" )
SchemaToken = ( "SCHEMA" / "schema" ) 
DefaultToken = ( "DEFAULT" / "default" )
CharacterToken = ( "CHARACTER" / "character" )
TableToken = ( "TABLE" / "table" )
IfToken = ( "IF" / "if" )
ElseToken = ( "ELSE" / "else" )
CaseToken = ( "CASE" / "case" )
WhenToken = ( "WHEN" / "when" )
NotToken = ( "NOT" / "not" )
ExistsToken = ( "EXISTS" / "exists" )
NullToken = ( "NULL" / "null" )
PrimaryToken = ( "PRIMARY" / "primary" )
KeyToken = ( "KEY" / "key" )
UniqueToken = ( "UNIQUE" / "unique" )
IndexToken = ( "INDEX" / "index" )
ConstraintToken = ( "CONSTRAINT" / "constraint" )
ForeignToken = ( "FOREIGN" / "foreign" )
ReferencesToken = ( "REFERENCES" / "references" )
AscToken = ( "ASC" / "asc" )
DescToken = ( "DESC" / "desc" )
AutoIncrementToken = ( "AUTO_INCREMENT" / "auto_increment" )
EngineToken = ( "ENGINE" / "engine" )
InsertToken = ( "INSERT" / "insert" )
IntoToken = ( "INTO" / "into" )
SelectToken = ( "SELECT" / "select" )
UpdateToken = ( "UPDATE" / "update" )
DeleteToken = ( "DELETE" / "delete" )
BeginToken = ( "BEGIN" / "begin" )
EndToken = ( "END" / "end" )
JoinToken = ( "JOIN" / "join" )
LeftToken = ( "LEFT" / "left" )
RightToken = ( "RIGHT" / "right" )
InnerToken = ( "INNER" / "inner" )
OnToken = ( "ON" / "on" )
WhereToken = ( "WHERE" / "where" )
InToken = ( "IN" / "in" ) 
TriggerToken = ( "TRIGGER" / "trigger" )
DefinerToken = ( "DEFINER" / "definer" )
NoToken = ( "NO" / "no" ) 
ActionToken = ( "ACTION" / "action" ) 
CharsetToken = ( "CHARSET" / "charset" ) 
CommentToken = ( "COMMENT" / "comment" ) 
VarToken = ("@") 
BeforeToken = ( "BEFORE" / "before" ) 
AfterToken = ( "AFTER" / "after" ) 

// Types ------------------------------

Type "types"
  = Int
  / TinyInt
  / VarChar
  / DateTime
  / Date

Int = type:( "INT" / "int" ) _ length:Length _ sign:Sign {
  return genNumberType(type, length, sign);
}
TinyInt = type:( "TINYINT" / "tinyint" ) _ length:Length _ sign:Sign {
  return genNumberType(type, length, sign);
}
VarChar = type:( "VARCHAR" / "varchar" ) _ length:Length {
  return genStringType(type, length);
}
Date = type:( "DATE" / "date" ) {
  return {
    type: type.toLowerCase()
  }
}
DateTime = type:( "DATETIME" / "datetime" ) {
  return {
    type: type.toLowerCase()
  }
}

// TypeMeta ------------------------------

Length "length of value" = ( "(" length:integer+ ")" / "" ) { return length === "" ? 0 : length; }
Sign "signed/unsigned" = sign:( "UNSIGNED" / "unsigned" / "" ) { return sign === "" ? "signed" : "unsigned"; }

// Indentifiers ------------------------------
ObjectName "identifier" = name:( "`" regularIdentifier "`" / regularIdentifier ) {
  var objectName = Array.isArray(name) ? name.join("").replace(/`/g, "").split(",").join("") : name.replace(/`/g, "").split(",").join("");
  return { name: objectName };
}
TableName "table name" = identifier:( ObjectName "." ObjectName / ObjectName ) {
  var ret = Array.isArray(identifier) ? {
    dbName: identifier[0]["name"],
    tableName: identifier[2]["name"]
  } : { dbName: "", tableName: identifier["name"] }
  return ret;
}

// Variables

//// Engines ------------------------------
engines = ("InnoDB" / "MyISAM")

//// Charests ------------------------------
charsets = ("utf8")

// Utilities ------------------------------

EOS "end of statement"
  = __ ";"
  / __ "$$"
  / _ SingleLineComment? LineTerminatorSequence
  / _ &")"
  / __ EOF

EOF
  = !.

__
  = ( (WhiteSpace / LineTerminatorSequence / Comment / MultiLineDelimiter / MultiLineTransaction)* ) { return null; }

_
  = ( (
  WhiteSpace
  / MultiLineCommentNoLineTerminator
  / MultiLineDelimiterNoLineTerminator
  / MultiLineTransactionNoLineTerminator)* ) { return null; }

WhiteSpace "whitespace"
  = 
  ws:("\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / Zs)

// Separator, Space
Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"
  
CommentOut "comment out"
  = comments:( MultiLineComment
  / SingleLineComment ) {
    return null;
  }

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator "open mulit-line comment"
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment "single-line comment"
  = "--" (!LineTerminator SourceCharacter)*

DelimiterStart = DelimiterToken _ "$$"
DelimiterEnd = DelimiterToken _ ";"

MultiLineDelimiter
  = DelimiterStart (!DelimiterEnd SourceCharacter)* DelimiterEnd
  
MultiLineDelimiterNoLineTerminator "open mulit-line delimiter"
  = DelimiterStart (!(DelimiterEnd / LineTerminator) SourceCharacter)* DelimiterEnd

StartTransaction = StartToken _ TransactionToken __ EOS
Commit = CommitToken __ EOS

MultiLineTransaction
  = StartTransaction (!Commit SourceCharacter)* Commit

MultiLineTransactionNoLineTerminator "open mulit-line transaction"
  = StartTransaction (!(Commit / LineTerminator) SourceCharacter)* Commit

SourceCharacter
  = .

integer "integer"
  = [0-9]

letter "letter"
  = [a-zA-Z]

defaultValue "defaults"
  = (anyCharacter / integer+ / "")

anyCharacter "any characters"
  = chars:("'" (!"'" SourceCharacter)* "'") {
	var flattened = flatten(chars);
    return flattened.join("");
  }

// Any does not consume any input
any "any"
  = ((!EOS SourceCharacter)* EOS) { return null; }

regularIdentifier "regular Identifier"
  = [a-zA-Z_]+

wl = "(" { return null; }
wr = ")" { return null; }